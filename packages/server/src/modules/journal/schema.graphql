# Student
type Student {
  id: Int!
  firstName: String!
	lastName: String!
  content: String!
  journals: [Journal]
}

# Journal
type Journal {
  id: Int!
  content: String!
}

# Edges for Students
type StudentEdges {
  node: Student
  cursor: Int
}

# PageInfo for Students
type StudentPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Students relay-style pagination query
type Students {
  totalCount: Int
  edges: [StudentEdges]
  pageInfo: StudentPageInfo
}

extend type Query {
  # Students pagination query
  students(limit: Int, after: Int): Students
  # Student
  student(id: Int!): Student
}

extend type Mutation {
  # Create new student
  addStudent(input: AddStudentInput!): Student
  # Delete a student
  deleteStudent(id: Int!): Student
  # Edit a student
  editStudent(input: EditStudentInput!): Student
  # Add journal to student
  addJournal(input: AddJournalInput!): Journal
  # Delete a journal
  deleteJournal(input: DeleteJournalInput!): Journal
  # Edit a journal
  editJournal(input: EditJournalInput!): Journal
}

# Input for addStudent Mutation
input AddStudentInput {
  firstName: String!
	lastName: String!
  content: String!
}

# Input for editStudent Mutation
input EditStudentInput {
  id: Int!
  firstName: String!
	lastName: String!
  content: String!
}

# Input for addJournal Mutation
input AddJournalInput {
  content: String!
  # Needed for journalUpdated Subscription filter
  studentId: Int!
}

# Input for editJournal Mutation
input DeleteJournalInput {
  id: Int!
  # Needed for journalUpdated Subscription filter
  studentId: Int!
}

# Input for deleteJournal Mutation
input EditJournalInput {
  id: Int!
  content: String!
  # Needed for journalUpdated Subscription filter
  studentId: Int!
}

extend type Subscription {
  # Subscription for when editing a student
  studentUpdated(id: Int!): Student
  # Subscription for student list
  studentsUpdated(endCursor: Int!): UpdateStudentPayload
  # Subscription for journals
  journalUpdated(studentId: Int!): UpdateJournalPayload
}

# Payload for studentsUpdated Subscription
type UpdateStudentPayload {
  mutation: String!
  id: Int!
  node: Student
}

# Payload for journalUpdated Subscription
type UpdateJournalPayload {
  mutation: String!
  id: Int
  studentId: Int!
  node: Journal
}
